wow = game
wow.dataType["TEXTURE"] = size(wow.dataType)
wow.dataType["FRAME"] = size(wow.dataType)
local achievements = {GetRewardItemID = wow.new(C_AchievementInfo.GetRewardItemID, wow.methodType.GET, {achievementID = wow.dataType.INT}, {rewardItemID = wow.dataType.INT}, "Returns any reward item for an achievement.", nil), GetSupercedingAchievements = wow.new(C_AchievementInfo.GetSupercedingAchievements, wow.methodType.GET, {achievementID = wow.dataType.INT}, {supercedingAchievements = wow.dataType.VAR}, "Returns the next achievement in a series.", nil), IsValidAchievement = wow.new(C_AchievementInfo.IsValidAchievement, wow.methodType.CHECK, {achievementID = wow.dataType.INT}, {isValidAchievement = wow.dataType.BOOLEAN}, "Needs summary.", nil), GetNextAchievement = wow.new(GetNextAchievement, wow.methodType.GET, {achievementID = wow.dataType.INT}, {nextAchievementID = wow.dataType.INT}, "Return the next achievement in a chain.", nil), IsTrackedAchievement = wow.new(IsTrackedAchievement, wow.methodType.CHECK, {achievementID = wow.dataType.INT}, {eligible = wow.dataType.BOOLEAN}, "Returns if an achievement is currently being tracked.", nil), IsAchievementEligible = wow.new(IsAchievementEligible, wow.methodType.CHECK, {achievementID = wow.dataType.INT}, {eligible = wow.dataType.BOOLEAN}, "Indicates whether the specified achievement is eligible to be completed.", nil), SetAchievementSearchString = wow.new(SetAchievementSearchString, wow.methodType.SET, {searchText = wow.dataType.STRING}, {searchFinished = wow.dataType.BOOLEAN}, "Starts a search for achievements containing the specified text.", nil)}
wow:addCategory("achievements", achievements)
local calendar = {CanAddEvent = wow.new(C_Calendar.CanAddEvent, wow.methodType.CHECK, {}, {canAddEvent = wow.dataType.BOOLEAN}, "Returns whether the player can add an event.", nil), EventDecline = wow.new(C_Calendar.EventDecline, wow.methodType.UI, {}, {}, "Declines the invitation to the currently open event.", nil), OpenCalendar = wow.new(C_Calendar.OpenCalendar, wow.methodType.UI, {}, {}, "Requests calendar information from the server. Does not open the calendar frame.", "Fires CALENDAR_UPDATE_EVENT_LIST, when your query has finished processing on the server and new calendar information is available. If called during the loading process, (even at PLAYER_ENTERING_WORLD) the query will not return."), OpenEvent = wow.new(C_Calendar.OpenEvent, wow.methodType.UI, {offsetMonths = wow.dataType.INT, monthDay = wow.dataType.INT, index = wow.dataType.INT}, {success = wow.dataType.BOOLEAN}, "Establishes an event for future calendar API calls", nil)}
wow:addCategory("calendar", calendar)
local ui = {CreateFrame = wow.new(CreateFrame, wow.methodType.UI, {frameType = wow.dataType.STRING, name = wow.dataType.STRING, parent = wow.dataType.FRAME, template = wow.dataType.STRING, id = wow.dataType.INT}, {frame = wow.dataType.FRAME}, "Creates a new Frame object.", "Frames cannot be deleted or garbage collected, but they can be reused/recycled (There technically is a way to destroy frames by parenting them to a user waypoint frame). Fires the frame's OnLoad script, if it has one from an inherited template."), EasyMenu = wow.new(EasyMenu, wow.methodType.UI, {menuList = wow.dataType.VAR, menuFrame = wow.dataType.FRAME, anchor = wow.dataType.STRING, x = wow.dataType.FLOAT, y = wow.dataType.FLOAT, displayMode = wow.dataType.STRING, autoHideDisplay = wow.dataType.FLOAT}, {}, "Populate a context menu with options described in a provided table.", "The menu becomes visible as soon as you call the function and goes away after you click a menu item unless keepShownOnClick in menuList was set to 1. UIDropDownMenu_Initialize will be called on the menuFrame argument, which will modify its layout. For this reason, avoid using your own widgets that do not inherit from UIDropDownMenuTemplate as the menuFrame argument. Fine-grained control over the positioning of the menu is possible by setting the menuFrame.point and menuFrame.relativePoint values to specific anchor points to use when anchoring the frame to a non-cursor region.")}
wow:addCategory("ui", ui)
