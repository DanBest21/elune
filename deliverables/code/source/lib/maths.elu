maths = {}

global def maths.min(...)
{
	minValue = arg[0]
	
	foreach x in arg
	{
		if x < minValue { minValue = x }
	}
	
	return minValue
}

global def maths.max(...)
{
	maxValue = arg[0]
	
	foreach x in arg
	{
		if x > maxValue { maxValue = x }
	}
	
	return maxValue
}

global def maths.range(...)
{
	xs = []
	argCount = 0
	
	foreach x in arg
	{
		argCount += 1
	}
	
	try
	{
		switch (argCount)
		{
			case 3
			{
				if (arg[1] > arg[0])
				{
					for i = 0, i < arg[1] - arg[0], i += arg[2]
					{
						xs[i] = arg[0] + i
					}
				}
				else
				{
					for i = 0, i < arg[0] - arg[1], i += arg[2]
					{
						xs[i] = arg[0] - i
					}
				}
			}
			case 2
			{
				if (arg[1] > arg[0])
				{
					for i = 0, i < arg[1] - arg[0], i += 1
					{
						xs[i] = arg[0] + i
					}
				}
				else
				{
					for i = 0, i < arg[0] - arg[1], i += 1
					{
						xs[i] = arg[0] - i
					}
				}
			}
			case 1
			{
				for i = 0, i < arg[0], i += 1
				{
					xs[i] = i
				}
			}
			default
			{
				throw InvalidArityException
			}
		}
	}
	catch InvalidArityException
	{
		print "InvalidArityException: Expected 1 to 3 arguments, but found " ++ length arg ++ " arguments."
	}
	
	return xs
}

global def maths.add(x, y)
{
	return x + y
}

global def maths.sub(x, y)
{
	return x - y
}

global def maths.multiply(x, y)
{
	return x * y
}

global def maths.divide(x, y)
{
	return x / y
}

global def maths.pow(x, y)
{
	return x ^ y
}

global def maths.root(x, y)
{
	return x ^ (1 / y)
}

global def maths.modulo(x, y)
{
	return x % y
}

global def maths.sqrt(x)
{
	return maths.root(x, 2)
}

global def maths.sum(xs)
{
	return foldl(maths.add, 0, xs)
}

global def maths.product(xs)
{
	return foldl(maths.multiply, 1, xs)
}

global def maths.isEven(x)
{
	return x % 2 == 0
}

global def maths.isOdd(x)
{
	return x % 2 != 0
}

return maths