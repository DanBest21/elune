global def append(x, xs)
{
	xs[length xs] = x
	return xs
}

global def insert(x, xs, pos)
{
	ys = []
	
	for i = 0, i <= pos, i += 1
	{
		ys[i] = xs[i]
	}
	
	// Force the type checker to realise pos is an int.
	ys[pos + 0] = x
	
	for i = pos, i < length xs, i += 1
	{
		ys[i + 1] = xs[i]
	}
	
	return ys
}

global def head(xs)
{
	return xs[0]
}

global def tail(xs)
{
	ys = []
	
	for i = 0, i < length xs - 1, i += 1
	{
		ys[i] = xs[i + 1] 
	}
	
	return ys
}

global def last(xs)
{
	return xs[length xs - 1]
}

global def init(xs)
{
	ys = []
	
	for i = 0, i < length xs - 1, i += 1
	{
		ys[i] = xs[i]
	}
	
	return ys
}

global def merge(xs, ys)
{
	ms = []
	
	i = 0
	
	foreach x in xs
	{
		ms[i] = x
		i += 1
	}
	
	foreach y in ys
	{
		ms[i] = y
		i += 1
	}
	
	return ms
}

global def slice(s, e, xs)
{
	if s == null { s = 0 }
	if e == null { e = length xs }
	if e < 0 { e = length xs - e }
	
	ys = []
	j = 0
	
	for i = s, i <= e, i += 1
	{
		ys[j] = xs[i]
		j += 1
	}
	
	return ys
}

global def intersperse(xs, ys)
{
	ms = []
	i = 0
	
	while length xs > 0 or length ys > 0
	{
		if length xs > 0
		{
			ms[i] = head(xs)
			xs = tail(xs)
			i += 1
		}
		
		if length ys > 0
		{
			ms[i] = head(ys)
			ys = tail(ys)
			i += 1
		}
	}
	
	return ms
}

global def map(f, xs)
{
	for i = 0, i < length xs, i += 1
	{
		xs[i] = f(xs[i])
	}
	
	return xs
}

global def filter(b, xs)
{
	ys = []
	i = 0
	
	foreach x in xs
	{
		if b(x)
		{
			ys[i] = x
			i += 1
		}
	}
	
	return ys
}

global def foldl(f, acc, xs)
{
	if length xs == 0 { return acc }
	
	acc = f(acc, head(xs))
	
	return foldl(f, acc, tail(xs))
}

global def foldr(f, acc, xs)
{
	if length xs == 0 { return acc }
	
	x = head(xs)
	
	return f(x, foldr(f, acc, tail(xs)))
}

global def printList(xs)
{
	foreach x in xs
	{
		print x
	}
}

global def size(xs)
{
	i = 0
	
	foreach k, x in xs
	{
		i += 1
	}
	
	return i
}