game = []

game.map = []

game.type = 
[
	NULL = 1,
	INT = 2,
	FLOAT = 3,
	BOOLEAN = 4,
	FUNCTION = 5,
	VAR = 6
]

global def game:getCategories()
{
	categories = []
	i = 1

	foreach name, contents in game.map
	{
		categories[i] = name
		i += 1
	}

	return categories
}

global def game:addCategory(name, contents)
{
	game.map[name] = contents
}

global def game:getCategory(name)
{
	return game.map[name]
}

global def game:call(category, name, ...)
{
	expectedReturnValues = length game.map[category][name]["Return_Values"]

	try
	{
		values = [game.map[category][name]["Function"](...)]

		if (length values != expectedReturnValues)
		{
			throw DispatcherException
		}
		else
		{
			return values
		}
	}
	catch DispatcherException
	{
		print "DispatcherException: Function '" ++ name ++ "' returned " ++ length values ++ " values, but expected " ++ expectedReturnValues ++ "."
	}
}

global def game:getDescription(category, name)
{
	return game.map[category][name]["Description"]
} 

global def game.new(f, params, ret, desc, add)
{
	record = 
	[ 
		Function = f,
		Parameters = params,
		Return_Values = ret,
		Description = desc,
		Additional_Information = add
	]

	return record
}

return game