game = {}

game.map = {}

game.dataType = 
{
	NULL = 1,
	INT = 2,
	FLOAT = 3,
	BOOLEAN = 4,
	FUNCTION = 5,
	VAR = 6
}

game.methodType =
{
	GET = 1,
	SET = 2,
	CHECK = 3,
	UI = 4
}

global def game:getCategories()
{
	categories = []
	i = 0

	foreach name, contents in game.map
	{
		categories[i] = name
		i += 1
	}

	return categories
}

global def game:getRecordsOnType(methodType)
{
	records = {}
	
	foreach _, category in game.map
	{			
		foreach name, record in category
		{
			if record.methodType is methodType
			{
				records[name] = record
			}
		}
	}
	
	return records
}

global def game:get(attribute)
{
	methods = game:getRecordsOnType(game.methodType.GET)
	
	foreach methodName, methodContents in methods
	{
		i = 0
		
		foreach valueName, _ in methodContents.returnValues
		{
			if valueName == attribute
			{
				/*
				if length methodContents.returnValues > 1
				{
					return methodContents.method()[i]
				}
				else
				{
					return methodContents.method()
				}
				*/
				return methodName
			}
			
			i += 1
		}
	}
}

global def game:set(attribute, value)
{
	methods = game:getRecordsOnType(game.methodType.SET)
	
	foreach methodName, methodContents in methods
	{
		foreach valueName, _ in methodContents.returnValues
		{
			if valueName == attribute
			{
				// return methodContents.method(value)
				return methodName
			}
		}
	}
}

global def game:check(attribute)
{
	methods = game:getRecordsOnType(game.methodType.CHECK)
	
	foreach methodName, methodContents in methods
	{
		foreach valueName, _ in methodContents.returnValues
		{
			if valueName == attribute
			{
				// return methodContents.method()
				return methodName
			}
		}
	}
}

global def game:addCategory(name, contents)
{
	game.map[name] = contents
}

global def game:getCategory(name)
{
	return game.map[name]
}

global def game:call(category, name, ...)
{
	expectedReturnValues = length game.map[category][name].returnValues

	try
	{
		values = [game.map[category][name].method(...)]

		if (length values != expectedReturnValues)
		{
			throw DispatcherException
		}
		else
		{
			return values
		}
	}
	catch DispatcherException
	{
		print "DispatcherException: Function '" ++ name ++ "' returned " ++ length values ++ " values, but expected " ++ expectedReturnValues ++ "."
	}
}

global def game:getDescription(category, name)
{
	return game.map[category][name].description
} 

global def game.new(f, t, params, ret, desc, add)
{
	record = 
	{
		method = f,
		methodType = t,
		parameters = params,
		returnValues = ret,
		description = desc,
		additionalInformation = add
	}

	return record
}

return game